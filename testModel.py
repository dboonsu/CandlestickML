# David McCormick - DTM190000

import os
import trainModel
import cv2
import numpy as np

def test():

    # These contains the results of my 10 epoch, 8% accuracy that had train/test of 6585/1647 images
    k1 = np.array([[[-0.28576581,  0.22135641,  0.5505454 ],
        [-0.65322488,  0.03023705,  0.50616442],
        [-0.61810084, -0.04440268,  0.56961625]],

       [[ 0.80467886,  0.37991947, -0.57067864],
        [ 1.12765264, -0.11191064, -1.87145203],
        [ 0.7332838 ,  0.31151537, -0.88482574]],

       [[-0.73202412,  0.00627675,  0.6862744 ],
        [-0.60622698,  0.03266967,  0.61444213],
        [-0.21312856,  0.05606294,  0.63502828]],

       [[-0.04693492,  0.09383623,  0.17820646],
        [ 0.1237919 ,  0.10676242,  0.17231164],
        [ 0.06732782,  0.09895536,  0.19966052]]])

    k2 = np.array([[[[ 5.25115513e-02, -1.02255960e-03,  3.49040965e-02],
         [ 4.89598298e-02,  1.39737365e-03,  1.51491790e-01],
         [ 1.21384752e-01, -6.73111188e-02, -1.84884310e-02]],

        [[ 2.06545350e-01, -2.44383336e-01, -2.94514537e-01],
         [-5.98531436e-03,  2.62300587e-02, -6.85394192e-02],
         [ 3.73034413e-02, -8.01092344e-02,  3.87474774e-01]],

        [[ 1.67619541e-02, -5.08390196e-02,  5.69056597e-02],
         [-4.56280125e-02, -5.56743034e-02,  1.70527629e-01],
         [ 1.26275470e-01, -1.02552933e-01,  1.36473607e-01]],

        [[-6.51479866e-02, -1.09792266e-01,  1.46237456e-01],
         [-1.19542981e-01, -1.16166822e-02,  3.59405108e-02],
         [ 4.01142663e-02, -2.60412677e-02, -5.47137837e-02]]],


       [[[ 1.55472582e-02,  1.11002703e-01, -1.29769504e-01],
         [-1.84481128e-01,  2.86224574e-01, -1.22984647e-01],
         [-1.55210979e-01,  1.47033008e-01,  4.28646854e-02]],

        [[ 8.85310877e-02, -6.56274362e-02,  3.13178939e-01],
         [ 5.57616244e-01,  3.87065164e-02,  2.88568932e-02],
         [ 2.93747501e-01, -1.17644427e-01, -3.14292839e-01]],

        [[-1.91823401e-01,  3.40622638e-02, -1.74538352e-01],
         [-2.94901140e-01,  2.30377207e-01,  8.56890632e-02],
         [-3.59921650e-01,  2.54077673e-01,  1.51421936e-01]],

        [[ 6.34937962e-03,  4.24054095e-02,  6.14589375e-02],
         [-1.10284858e-01,  4.45018195e-02,  1.41112437e-01],
         [-1.81895500e-01, -8.84604205e-02,  2.02163740e-01]]],


       [[[-1.40613010e-02, -2.73902137e-03, -1.34232087e-01],
         [-1.62155487e-03,  1.21999558e-01, -2.95388777e-01],
         [-9.25098831e-02, -2.40954636e-02, -3.83114557e-01]],

        [[-1.00055338e-01, -8.67996830e-02, -1.58195807e-01],
         [-9.56197435e-02, -2.80702366e-02,  6.35402284e-01],
         [-1.33882420e-01, -1.08016186e-02,  6.89294332e-01]],

        [[ 1.67098446e-01,  1.30425673e-01, -1.51662753e-01],
         [-3.48900119e-03,  1.01213077e-01, -3.90903824e-01],
         [-1.88176829e-02, -1.49620072e-02, -5.65046788e-01]],

        [[ 1.16057197e-01, -8.01180339e-02,  1.29580255e-01],
         [ 7.65698212e-02,  1.09391675e-01, -6.67415321e-02],
         [ 8.50556120e-02,  6.81912660e-02, -1.01642682e-01]]],


       [[[ 2.51434511e-01, -2.08784415e-01, -6.12774522e-02],
         [ 2.47473599e-01, -1.14554715e-01, -5.33585826e-02],
         [ 2.15972063e-01, -9.10300303e-02, -1.97868751e-01]],

        [[-3.85824122e-01, -2.13556912e-01, -1.09361054e-01],
         [-3.28988471e-01, -2.37690334e-01, -8.12448833e-02],
         [-4.68951168e-01, -2.11318876e-01, -1.31370879e-01]],

        [[ 3.22460734e-01,  5.14703469e-02, -1.76513920e-01],
         [ 2.56931830e-01, -2.67021717e-02, -7.97364834e-02],
         [ 3.10013780e-01, -9.12336512e-02, -1.78089245e-01]],

        [[ 2.96905230e-01,  1.68717091e-01,  9.52215703e-02],
         [ 2.85977973e-01,  9.64526363e-02,  3.55356769e-02],
         [ 2.37217794e-01,  1.32487578e-01,  5.65197899e-02]]],


       [[[-4.84131979e-02, -1.33767124e-01,  6.08659262e-02],
         [-1.40100258e-02,  9.56907406e-02,  1.48312096e-03],
         [ 6.88026215e-02,  1.65689893e-01, -5.70277823e-02]],

        [[-3.01669420e-01,  1.95145708e-01, -2.16835547e-02],
         [ 1.59938281e-01, -3.90363567e-02, -3.24444951e-02],
         [ 2.54767001e-01, -1.41031893e-01,  4.27207734e-03]],

        [[-2.46754852e-02, -1.40350616e-01, -3.09454764e-02],
         [ 5.62401066e-02, -9.58344673e-03,  1.13019480e-01],
         [-1.36236827e-02, -1.25617730e-02,  8.83087247e-02]],

        [[ 2.46705107e-02, -2.04332663e-02, -8.10453415e-02],
         [-3.91941897e-02, -7.31476152e-02,  1.12323864e-01],
         [-5.77391755e-02, -3.76527752e-04, -2.70482319e-03]]],


       [[[-5.18257194e-01,  4.83935393e-01, -1.09705928e-01],
         [-4.35916141e-01,  4.56245449e-01,  4.29733137e-05],
         [-3.07436992e-01,  3.16983770e-01, -1.24515998e-01]],

        [[ 8.35605020e-01, -3.01044462e-02, -5.15137937e-02],
         [ 1.00689953e+00,  3.83190667e-02, -4.90190833e-02],
         [ 4.47507799e-01,  3.03322456e-02, -1.97529168e-01]],

        [[-5.29396941e-01,  2.27792917e-01,  1.98159408e-01],
         [-6.34738443e-01,  4.12750858e-01,  2.43432955e-01],
         [-4.83531770e-01,  3.61444925e-01,  1.46215584e-01]],

        [[-1.86966069e-01, -5.69490994e-02,  1.47716269e-01],
         [-1.57684375e-01,  7.50801338e-02,  2.79766454e-01],
         [-1.57465347e-01,  7.51245140e-02,  2.79418576e-01]]]])

    weights = np.array([[ 0.00615567, -0.02846925,  0.02672204, ...,  0.02248076,
        -0.14837573,  0.02399354],
       [-0.01384891,  0.07023771,  0.09795923, ...,  0.01518019,
         0.52780001,  0.01974622],
       [ 0.07577044,  0.0793353 , -0.02032411, ...,  0.11378825,
         0.35299618, -0.01750208],
       ...,
       [ 0.03671432,  0.07205581,  0.05202341, ..., -0.05864047,
        -0.03659212, -0.01625965],
       [-0.12411438,  0.0492163 ,  0.0356676 , ...,  0.02603773,
        -0.11579501,  0.06132429],
       [ 0.02342547,  0.01359241, -0.07620961, ..., -0.12751121,
        -0.55232132,  0.05051345]])

    # Prints out the dimensions of the kernels and weight tensors
    print("Dimensions:")
    print(k1.shape)
    print(k2.shape)
    print(weights.shape)

    # Populates a list of class names
    classNames = []
    dir = "IMGDIR/"
    for folder in os.scandir(dir):
        classNames.append(folder.name)

    # Goes into each folder and finds a correct classification
    for folder in os.scandir(dir):
        for file in os.scandir(folder):

            path = "IMGDIR/" + folder.name + "/" + file.name

            # Reads the image as grayscale
            current = cv2.imread(path, 0)

            # Resizes the image to 28x28
            resize = cv2.resize(current, (28, 28), interpolation=cv2.INTER_AREA)

            # Makes the image float
            resize = resize/255 - .5

            # Runs the predictive function with the given kernels and weights
            predictions = trainModel.predict(resize, k1, k2, weights)

            # Identifies which class the model predicts
            prediction = classNames[np.argmax(predictions)]

            # If the image is correctly classified, it continues to the next folder
            if (prediction == folder.name):
                print("Correct Prediction")
                print(path)
                break

    exit(0)